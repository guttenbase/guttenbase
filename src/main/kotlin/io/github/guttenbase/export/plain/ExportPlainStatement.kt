package io.github.guttenbase.export.plain

import io.github.guttenbase.utils.Util.toDate
import java.io.InputStream
import java.io.Reader
import java.math.BigDecimal
import java.net.URL
import java.sql.*
import java.sql.Date
import java.time.format.DateTimeFormatter
import java.util.*

/**
 * Connection info for exporting data to a file.
 *
 *  &copy; 2024-2044 akquinet tech@spree
 *
 * @author M. Dahm
 */
class ExportPlainStatement(sql: String, private val connection: ExportPlainConnection) : PreparedStatement {
  private var closed = false
  private var sql: String = sql
    set(sql) {
      if (!checkSQL(sql)) throw UnsupportedOperationException("Statement not supported: $sql")
      field = sql
    }

  private val values = ArrayList<StatementValue>(1000)

  private fun checkSQL(sql: String): Boolean {
    val trimmed = sql.uppercase().trim()

    return when {
      trimmed.isEmpty() -> true
      trimmed.startsWith("INSERT ") -> true
      trimmed.startsWith("UPDATE ") -> true
      else -> false
    }
  }

  private fun createSQLStatement(): String {
    var count = 0
    val result = Regex("([?])").replace(sql) {
      values[count++].toSQL()
    }

    values.clear()

    return result
  }

  private fun setValue(parameterIndex: Int, value: Any?) {
    assert(parameterIndex - 1 == values.size) { "Adding parameters not executed in sequence"}
    values.ensureCapacity(parameterIndex + 100)
    values.add(StatementValue(value))
  }

  override fun close() {
    if (sql.isNotBlank() && !closed) {
      executeUpdate()
    }

    closed = true
    sql = ""
  }

  override fun addBatch() {
  }

  override fun addBatch(sql: String) {
    this.sql = sql
  }

  override fun clearBatch() {
    sql = ""
  }

  override fun executeBatch() = intArrayOf(1)

  override fun executeUpdate(): Int {
    connection.addStatement(createSQLStatement())

    return 1
  }

  override fun executeUpdate(sql: String): Int {
    this.sql = sql
    return executeUpdate()
  }

  override fun executeUpdate(sql: String, autoGeneratedKeys: Int) = executeUpdate(sql)

  override fun executeUpdate(sql: String, columnIndexes: IntArray?) = executeUpdate(sql)

  override fun executeUpdate(sql: String, columnNames: Array<out String>) = executeUpdate(sql)

  override fun getConnection() = connection

  override fun execute() = execute(sql)

  override fun execute(sql: String): Boolean {
    executeUpdate(sql)
    return true
  }

  override fun execute(sql: String, autoGeneratedKeys: Int) = execute(sql)

  override fun execute(sql: String, columnIndexes: IntArray) = execute(sql)

  override fun execute(sql: String, columnNames: Array<out String>) = execute(sql)

  override fun getResultSet(): ResultSet {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getUpdateCount() = 1


  override fun executeQuery(): ResultSet {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun executeQuery(sql: String): ResultSet {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getMaxFieldSize(): Int {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setMaxFieldSize(max: Int) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getMaxRows(): Int {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setMaxRows(max: Int) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setEscapeProcessing(enable: Boolean) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getQueryTimeout(): Int {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setQueryTimeout(seconds: Int) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun cancel() {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getWarnings(): SQLWarning {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun clearWarnings() {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setCursorName(name: String?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getMoreResults(): Boolean {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getMoreResults(current: Int): Boolean {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setFetchDirection(direction: Int) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getFetchDirection(): Int {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setFetchSize(rows: Int) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getFetchSize(): Int {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getResultSetConcurrency(): Int {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getResultSetType(): Int {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getGeneratedKeys(): ResultSet {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getResultSetHoldability(): Int {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun isClosed() = closed

  override fun setPoolable(poolable: Boolean) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun isPoolable(): Boolean {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun closeOnCompletion() {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun isCloseOnCompletion(): Boolean {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setNull(parameterIndex: Int, sqlType: Int) {
    setValue(parameterIndex, null)
  }

  override fun setNull(parameterIndex: Int, sqlType: Int, typeName: String?) {
    setValue(parameterIndex, null)
  }

  override fun setObject(parameterIndex: Int, x: Any?, targetSqlType: Int) {
    TODO("not implemented")
  }

  override fun setObject(parameterIndex: Int, x: Any?) {
    TODO("not implemented")
  }

  override fun setObject(parameterIndex: Int, x: Any?, targetSqlType: Int, scaleOrLength: Int) {
    TODO("not implemented")
  }

  override fun setBlob(parameterIndex: Int, x: Blob?) {
    TODO()
  }

  override fun setBlob(parameterIndex: Int, inputStream: InputStream, length: Long) {
    TODO()
  }

  override fun setBlob(parameterIndex: Int, inputStream: InputStream) {
    TODO()
  }

  override fun setClob(parameterIndex: Int, x: Clob?) {
    TODO()
  }

  override fun setClob(parameterIndex: Int, reader: Reader, length: Long) {
    TODO()
  }

  override fun setClob(parameterIndex: Int, reader: Reader) {
    TODO()
  }

  override fun setBoolean(parameterIndex: Int, x: Boolean) {
    setValue(parameterIndex, x)
  }

  override fun setByte(parameterIndex: Int, x: Byte) {
    setValue(parameterIndex, x)
  }

  override fun setShort(parameterIndex: Int, x: Short) {
    setValue(parameterIndex, x)
  }

  override fun setInt(parameterIndex: Int, x: Int) {
    setValue(parameterIndex, x)
  }

  override fun setLong(parameterIndex: Int, x: Long) {
    setValue(parameterIndex, x)
  }

  override fun setFloat(parameterIndex: Int, x: Float) {
    setValue(parameterIndex, x)
  }

  override fun setDouble(parameterIndex: Int, x: Double) {
    setValue(parameterIndex, x)
  }

  override fun setBigDecimal(parameterIndex: Int, x: BigDecimal?) {
    setValue(parameterIndex, x)
  }

  override fun setString(parameterIndex: Int, x: String?) {
    setValue(parameterIndex, x)
  }

  override fun setBytes(parameterIndex: Int, x: ByteArray) {
    setValue(parameterIndex, x)
  }

  override fun setDate(parameterIndex: Int, x: Date?) {
    setValue(parameterIndex, x)
  }

  override fun setDate(parameterIndex: Int, x: Date?, cal: Calendar?) {
    setValue(parameterIndex, x)
  }

  override fun setTime(parameterIndex: Int, x: Time?) {
    setValue(parameterIndex, x)
  }

  override fun setTime(parameterIndex: Int, x: Time?, cal: Calendar?) {
    setValue(parameterIndex, x)
  }

  override fun setTimestamp(parameterIndex: Int, x: Timestamp?) {
    setValue(parameterIndex, x)
  }

  override fun setTimestamp(parameterIndex: Int, x: Timestamp?, cal: Calendar?) {
    setValue(parameterIndex, x)
  }

  override fun setAsciiStream(parameterIndex: Int, x: InputStream?, length: Int) {
    setValue(parameterIndex, x)
  }

  override fun setAsciiStream(parameterIndex: Int, x: InputStream?, length: Long) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setAsciiStream(parameterIndex: Int, x: InputStream?) {
    throw UnsupportedOperationException("Not implemented")
  }

  @Deprecated("Deprecated in Java", ReplaceWith("Dunno"))
  override fun setUnicodeStream(parameterIndex: Int, x: InputStream?, length: Int) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setBinaryStream(parameterIndex: Int, x: InputStream?, length: Int) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setBinaryStream(parameterIndex: Int, x: InputStream?, length: Long) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setBinaryStream(parameterIndex: Int, x: InputStream?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun clearParameters() {
    values.clear()
  }

  override fun setCharacterStream(parameterIndex: Int, reader: Reader?, length: Int) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setCharacterStream(parameterIndex: Int, reader: Reader?, length: Long) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setCharacterStream(parameterIndex: Int, reader: Reader?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setRef(parameterIndex: Int, x: Ref?) {
    throw UnsupportedOperationException("Not implemented")
  }


  override fun setArray(parameterIndex: Int, x: java.sql.Array?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getMetaData(): ResultSetMetaData {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setURL(parameterIndex: Int, x: URL?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun getParameterMetaData(): ParameterMetaData {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setRowId(parameterIndex: Int, x: RowId?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setNString(parameterIndex: Int, value: String?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setNCharacterStream(parameterIndex: Int, value: Reader?, length: Long) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setNCharacterStream(parameterIndex: Int, value: Reader?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setNClob(parameterIndex: Int, value: NClob?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setNClob(parameterIndex: Int, reader: Reader?, length: Long) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setNClob(parameterIndex: Int, reader: Reader?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun setSQLXML(parameterIndex: Int, xmlObject: SQLXML?) {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun <T : Any?> unwrap(iface: Class<T>?): T {
    throw UnsupportedOperationException("Not implemented")
  }

  override fun isWrapperFor(iface: Class<*>?) = false
}

private data class StatementValue(private val value: Any?) {
  fun toSQL(): String = when (value) {
    null -> "NULL"
    is String -> "'$value'"
    is Double -> value.toString()
    is Boolean -> value.toString()
    is Byte -> value.toString()
    is Float -> value.toString()
    is Short -> value.toString()
    is Long -> value.toString()
    is Int -> value.toString()
    is BigDecimal -> value.toPlainString()
    is Date -> SQL_DATE_FORMAT.format(value.toDate().toInstant())
    is Timestamp -> SQL_TIMESTAMP_FORMAT.format(value.toDate().toInstant())
    is Time -> SQL_TIME_FORMAT.format(value.toDate().toInstant())
    else -> throw IllegalStateException("Cannot transform $value::${value.javaClass.name}")
  }
}

private val SQL_DATE_FORMAT = DateTimeFormatter.ofPattern("dd-MM-yyyy")
private val SQL_TIMESTAMP_FORMAT = DateTimeFormatter.ofPattern("dd-MM-yyyy HH:mm:ss")
private val SQL_TIME_FORMAT = DateTimeFormatter.ofPattern("HH:mm:ss")